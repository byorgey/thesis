A place to dump text from elsewhere that should perhaps eventually end
up in my dissertation in some form

\subsection{Species isomorphism}
\label{sec:species-iso}

We have now seen four primitive species: \Zero, \One, \X, and \E.  It
turns out that each of them is the unit for a different monoid
structure on species; we will look at each of these in turn, as well
as an additional fifth monoid structure.  Before we get there,
however, we need to take a brief detour to discuss isomorphism of
species, since the monoid laws hold only up to isomorphism.

Since species are functors, a \term{morphism} between species $F$ and
$G$ is a natural transformation, that is, a transformation from
$F$-shapes to $G$-shapes which works uniformly for all label
types. Formally, the type of species morphisms is given by
\begin{align*}
  &- \mor - : \Species \to \Species \to \Type \\
  &F \mor G = (\varphi : \impl{L : \FinType} \to F\ L \to G\ L)
  \times \Natural\ \varphi
\end{align*}
where $\Natural\ \varphi$ is the proposition which states that $\varphi$ is
\term{natural}, that is, the diagram shown in
\pref{fig:species-morphism} commutes for all $L, L' : \FinType$ and
all $\sigma : L \iso L'$.
\begin{figure}[h!]
  \centering
  \centerline{
    \xymatrix{
      F\ L \ar[d]_{\varphi_L} \ar[r]^{F\ \sigma} & F\ L' \ar[d]^{\varphi_{L'}} \\
      G\ L                    \ar[r]_{G\ \sigma} & G\ L'
    }
  }
  \caption{Naturality for species morphisms}
  \label{fig:species-morphism}
\end{figure}
Intuitively, $\varphi$ is natural if it does not depend on the type of
the labels, that is, it acts uniformly for all choices of label set:
it does not matter whether one first relabels an $F$-shape and then
applies $\varphi$, or applies $\varphi$ first and later relabels.

An \term{isomorphism} between species, denoted $F \natiso G$, is just
a pair of inverse morphisms, that is, $\varphi : F \mor G$ and
$\varphi^{-1} : G \mor F$ such that $\varphi^{-1}_L \comp \varphi_L =
id_{FL}$ and $\varphi_L \comp \varphi^{-1}_L = id_{GL}$ for all $L :
\FinType$.  Species isomorphism preserves all the interesting
\emph{combinatorial} properties of species; hence in the combinatorics
literature everything is always implicitly done up to
isomorphism. However, species isomorphisms carry computational
content, so when dealing with labelled structures we must be more
careful and explicit in their use.

It is worth noting that an inverse pair of ``bare'' morphisms, without
naturality, constitute what is termed an \term{equipotence} between
two species.  An equipotence preserves the \emph{number} of shapes of
each size, but it does not necessarily preserve the structure of those
shapes. As a classic example, the species of \emph{lists} and the
species of \emph{permutations} are equipotent but not isomorphic:
there are the same number of lists as permutations of $n$ labels
(namely, $n!$), but there is no way to set up an isomorphism between
them which is uniform over the labels: any such isomorphism
necessarily depends on a linear ordering of the labels.  In a sense,
permutations have ``more structure'' than lists, and this extra
structure cannot be preserved by an isomorphism.  In any case,
although equipotences are of interest to combinatorialists, so far
they do not seem to be of much use computationally, so we will not
consider them further in this paper.



---------------------------------------------

hom-set, exponential, and power notation.

Note that the same notation (namely, $- \to -$) is used for hom-sets,
exponentials (\pref{sec:monoids}) and powers (\pref{sec:enriched}).
While this certainly has the potential to introduce ambiguity and
confusion, it has the \todo{finish}

For example, the traditional notation \[ \int_{b} H
b^{\C(a,G b)} \] can be instead written as the Haskell-like \[
\eend{b} {(a \to G b) \to H b}, \] where the end
(\pref{sec:ends-coends}) has been written using $\forall$, and both
the hom set $\C(a, G b)$ and the power $H b^{\C(\dots)}$ using $\to$.
It should be emphasized that this notation is perfectly rigorous, and
not just an ``approximation'' in Haskell.


%%% More stuff pasted from proposal below.  It's mostly outdated at
%%% this point.

% In particular, I aim to begin answering
% the question:
% \begin{quote}
%   \textbf{What benefits can be derived from using the mathematical
%     theory of species as a foundational theory of data structures?}
% \end{quote}
% Answers to this question can take many forms.  What would a
% programming language with ``species types'' look like?  Can we use
% species theory as a tool for working with existing algebraic data
% types?  Specifically, the contributions of the proposed research are
% threefold:
% \begin{enumerate}
% \item A significant part of the proposed work will consist in
%   synthesizing and re-presenting relevant parts of the theory of
%   species in a way that is accessible to others in the programming
%   languages community and the wider computer science community. This
%   will be a significant contribution: as explained above, the existing
%   literature on species is relatively inaccessible to programming
%   language researchers.  My strong background in mathematics and
%   experience in teaching and writing make me an ideal ``ambassador''
%   to bridge the two worlds.  There is also much remaining to be
%   explored---areas of the theory neglected or unexplored by
%   mathematicians, but relevant to the theory of data types.  My blog
%   post at
%   \url{http://byorgey.wordpress.com/2012/08/24/unordered-tuples-and-type-algebra/}
%   contains one example.

%   \pref{sec:species}, which contains a brief exposition of relevant
%   parts of the theory of species, is not merely background for
%   understanding the rest of the proposal.  It also serves as a sample:
%   my proposed dissertation will contain a greatly expanded and
%   improved version of the presentation which I hope can serve as the
%   standard reference on combinatorial species for those in the
%   computer science community.

% \item The second contribution will be to lay the theoretical groundwork for
%   understanding species as a foundation for data types.  That is, if
%   one wanted to design a programming language with ``species types''
%   from the ground up---if one was to take the theory of species as the
%   starting point rather than the theory of algebraic data types---what
%   would it look like, and how would one understand the implementation
%   from a theoretical point of view?
%   Section~\ref{sec:species-as-data-types} presents some preliminary
%   results in this direction and lays out a roadmap for the remaining
%   theory to be developed.

% \item Third, the theory of species can be used to build practical
%   tools for working with existing algebraic data types.  Towards this
%   end I have developed a library, written in Haskell, for computing
%   with species and facilitating application of the theory to existing
%   data types.  Section~\ref{sec:species-library} explains the current
%   features of the library and proposes new features to be added.

%   Simply writing a library is not necessarily worth being called a
%   research contribution, but this library represents such a
%   contribution for two reasons: first, it can serve as a practical
%   outworking of the material outlined in
%   \pref{sec:species-as-data-types}; second, and more importantly,
%   there has been very little work bringing species into a
%   \emph{strongly typed} context.  Working out how best to do this may
%   result in some interesting lessons for generic programming; at the
%   very least it will serve as a case study on some of Haskell's more
%   advanced type system features~\citep{schrijvers2008type,
%     yorgey2012promotion, eisenberg2012singletons}.

% \end{enumerate}
