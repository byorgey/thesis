A place to dump text from elsewhere that should perhaps eventually end
up in my dissertation in some form

\subsection{Species isomorphism}
\label{sec:species-iso}

We have now seen four primitive species: \Zero, \One, \X, and \E.  It
turns out that each of them is the unit for a different monoid
structure on species; we will look at each of these in turn, as well
as an additional fifth monoid structure.  Before we get there,
however, we need to take a brief detour to discuss isomorphism of
species, since the monoid laws hold only up to isomorphism.

Since species are functors, a \term{morphism} between species $F$ and
$G$ is a natural transformation, that is, a transformation from
$F$-shapes to $G$-shapes which works uniformly for all label
types. Formally, the type of species morphisms is given by
\begin{align*}
  &- \mor - : \Species \to \Species \to \Type \\
  &F \mor G = (\varphi : \impl{L : \FinType} \to F\ L \to G\ L)
  \times \Natural\ \varphi
\end{align*}
where $\Natural\ \varphi$ is the proposition which states that $\varphi$ is
\term{natural}, that is, the diagram shown in
\pref{fig:species-morphism} commutes for all $L, L' : \FinType$ and
all $\sigma : L \iso L'$.
\begin{figure}[h!]
  \centering
  \centerline{
    \xymatrix{
      F\ L \ar[d]_{\varphi_L} \ar[r]^{F\ \sigma} & F\ L' \ar[d]^{\varphi_{L'}} \\
      G\ L                    \ar[r]_{G\ \sigma} & G\ L'
    }
  }
  \caption{Naturality for species morphisms}
  \label{fig:species-morphism}
\end{figure}
Intuitively, $\varphi$ is natural if it does not depend on the type of
the labels, that is, it acts uniformly for all choices of label set:
it does not matter whether one first relabels an $F$-shape and then
applies $\varphi$, or applies $\varphi$ first and later relabels.

An \term{isomorphism} between species, denoted $F \natiso G$, is just
a pair of inverse morphisms, that is, $\varphi : F \mor G$ and
$\varphi^{-1} : G \mor F$ such that $\varphi^{-1}_L \comp \varphi_L =
id_{FL}$ and $\varphi_L \comp \varphi^{-1}_L = id_{GL}$ for all $L :
\FinType$.  Species isomorphism preserves all the interesting
\emph{combinatorial} properties of species; hence in the combinatorics
literature everything is always implicitly done up to
isomorphism. However, species isomorphisms carry computational
content, so when dealing with labelled structures we must be more
careful and explicit in their use.

It is worth noting that an inverse pair of ``bare'' morphisms, without
naturality, constitute what is termed an \term{equipotence} between
two species.  An equipotence preserves the \emph{number} of shapes of
each size, but it does not necessarily preserve the structure of those
shapes. As a classic example, the species of \emph{lists} and the
species of \emph{permutations} are equipotent but not isomorphic:
there are the same number of lists as permutations of $n$ labels
(namely, $n!$), but there is no way to set up an isomorphism between
them which is uniform over the labels: any such isomorphism
necessarily depends on a linear ordering of the labels.  In a sense,
permutations have ``more structure'' than lists, and this extra
structure cannot be preserved by an isomorphism.  In any case,
although equipotences are of interest to combinatorialists, so far
they do not seem to be of much use computationally, so we will not
consider them further in this paper.



---------------------------------------------

hom-set, exponential, and power notation.

Note that the same notation (namely, $- \to -$) is used for hom-sets,
exponentials (\pref{sec:monoids}) and powers (\pref{sec:enriched}).
While this certainly has the potential to introduce ambiguity and
confusion, it has the \todo{finish}

For example, the traditional notation \[ \int_{b} H
b^{\C(a,G b)} \] can be instead written as the Haskell-like \[
\eend{b} {(a \to G b) \to H b}, \] where the end
(\pref{sec:ends-coends}) has been written using $\forall$, and both
the hom set $\C(a, G b)$ and the power $H b^{\C(\dots)}$ using $\to$.
It should be emphasized that this notation is perfectly rigorous, and
not just an ``approximation'' in Haskell.


%%% More stuff pasted from proposal below.  It's mostly outdated at
%%% this point.

% In particular, I aim to begin answering
% the question:
% \begin{quote}
%   \textbf{What benefits can be derived from using the mathematical
%     theory of species as a foundational theory of data structures?}
% \end{quote}
% Answers to this question can take many forms.  What would a
% programming language with ``species types'' look like?  Can we use
% species theory as a tool for working with existing algebraic data
% types?  Specifically, the contributions of the proposed research are
% threefold:
% \begin{enumerate}
% \item A significant part of the proposed work will consist in
%   synthesizing and re-presenting relevant parts of the theory of
%   species in a way that is accessible to others in the programming
%   languages community and the wider computer science community. This
%   will be a significant contribution: as explained above, the existing
%   literature on species is relatively inaccessible to programming
%   language researchers.  My strong background in mathematics and
%   experience in teaching and writing make me an ideal ``ambassador''
%   to bridge the two worlds.  There is also much remaining to be
%   explored---areas of the theory neglected or unexplored by
%   mathematicians, but relevant to the theory of data types.  My blog
%   post at
%   \url{http://byorgey.wordpress.com/2012/08/24/unordered-tuples-and-type-algebra/}
%   contains one example.

%   \pref{sec:species}, which contains a brief exposition of relevant
%   parts of the theory of species, is not merely background for
%   understanding the rest of the proposal.  It also serves as a sample:
%   my proposed dissertation will contain a greatly expanded and
%   improved version of the presentation which I hope can serve as the
%   standard reference on combinatorial species for those in the
%   computer science community.

% \item The second contribution will be to lay the theoretical groundwork for
%   understanding species as a foundation for data types.  That is, if
%   one wanted to design a programming language with ``species types''
%   from the ground up---if one was to take the theory of species as the
%   starting point rather than the theory of algebraic data types---what
%   would it look like, and how would one understand the implementation
%   from a theoretical point of view?
%   Section~\ref{sec:species-as-data-types} presents some preliminary
%   results in this direction and lays out a roadmap for the remaining
%   theory to be developed.

% \item Third, the theory of species can be used to build practical
%   tools for working with existing algebraic data types.  Towards this
%   end I have developed a library, written in Haskell, for computing
%   with species and facilitating application of the theory to existing
%   data types.  Section~\ref{sec:species-library} explains the current
%   features of the library and proposes new features to be added.

%   Simply writing a library is not necessarily worth being called a
%   research contribution, but this library represents such a
%   contribution for two reasons: first, it can serve as a practical
%   outworking of the material outlined in
%   \pref{sec:species-as-data-types}; second, and more importantly,
%   there has been very little work bringing species into a
%   \emph{strongly typed} context.  Working out how best to do this may
%   result in some interesting lessons for generic programming; at the
%   very least it will serve as a case study on some of Haskell's more
%   advanced type system features~\citep{schrijvers2008type,
%     yorgey2012promotion, eisenberg2012singletons}.

% \end{enumerate}




% \section{The Gordon complementary bijection principle}

% \later{Not sure what to do with this.}

% Suppose $A_0, A_1, B_0, B_1$ are types with bijections $f_0 : A_0 \bij
% B_0$ and $f_1 : A_1 \bij B_1$.  Then it's clear how to construct a
% bijection $f : A_0 + A_1 \bij B_0 + B_1$: one just takes $f
% = f_0 + f_1$, as illustrated in \pref{fig:adding-bijections}.

% \begin{figure}
%   \centering
%   \begin{diagram}[width=200]
% import Bijections

% dia =
%   (vcat' (with & sep .~ 1) . map centerX)
%   [ hcat' (with & sep .~ 2)
%     [ drawBComplex $ bc0 # labelBC "f₀"  -- $
%     , plus
%     , drawBComplex $ bc1 # labelBC "f₁"  -- $
%     ]
%   , equals
%   , drawBComplex $ parC bc0 bc1 # labelBC "f = f₀ + f₁"  -- $
%   ]
%   # centerXY
%   # frame 0.5
%   # lwO 0.7
%   \end{diagram}
%   \caption{Adding bijections}
%   \label{fig:adding-bijections}
% \end{figure}

% So computing the ``sum'' of two bijections is not hard. What about the
% \emph{difference}?  That is, given $f : A_0 + A_1 \bij B_0 + B_1$ and
% $f_1 : A_1 \bij B_1$, can we compute some $f_0 : A_0 \bij B_0$
% (\pref{fig:subtracting-bijections})?

% \begin{figure}
%   \centering
%   \begin{diagram}[width=200]
% import           Bijections

% dia =
%   (vcat' (with & sep .~ 1) . map centerX)
%   [ hcat' (with & sep .~ 2)
%     [ drawBComplex $   -- $
%       [a0,a1] .- bij01 # labelBij "f" -.. [b0,b1]
%     , minus
%     , drawBComplex $ bc1 # labelBC "f₁"  -- $
%     ]
%   , equals
%   , mconcat
%     [ text' 3 "?"
%     , drawBComplex $ [a0] .- emptyBij # labelBij "f₀" -.. [b0]  -- $
%     ]
%   ]
%   # centerXY
%   # frame 0.5
%   # lwO 0.7
%   \end{diagram}
%   \caption{Subtracting bijections?}
%   \label{fig:subtracting-bijections}
% \end{figure}

% Though it is obvious that $\size A_0 = \size B_0$, it is not \latin{a
%   priori} obvious whether it is possible to actually construct a
% bijection between them.  The problem, as can be seen in
% \pref{fig:subtracting-bijections}, is that $f$ may mix up elements
% among the $A_i$ and $B_i$---that is, one cannot simply, say, take the
% restriction of $f$ to $A_0$, since the image of $A_0$ under $f$ may
% intersect both $B_0$ and $B_1$.

% However, it turns out that this is possible, via the \term{Gordon
%   complementary bijection principle} \later{cite}.  You might want to
% stop and think about it for a while at this point.  If you know some
% Haskell, try filling in the definition of `subtractIso`:

% > {-# LANGUAGE TypeOperators #-}
% >
% > import Prelude hiding ((.), id)
% > import Control.Category
% >
% > data a :<->: b = (a -> b) :<->: (b -> a)
% >   -- Invariant: the two functions are inverse.
% >
% > applyIso :: (a :<->: b) -> (a -> b)
% > applyIso (f :<->: _) = f
% >
% > invert :: (a :<->: b) -> (b :<->: a)
% > invert (f :<->: g) = (g :<->: f)
% >
% > instance Category (:<->:) where
% >   id = id :<->: id
% >   (f1 :<->: g1) . (f2 :<->: g2) = (f1 . f2) :<->: (g2 . g1)
% >
% > subtractIso :: (Either a0 a1 :<->: Either b0 b1) -> (a1 :<->: b1) -> (a0 :<->: b0)
% > subtractIso = undefined

% Instead of defining the GCBP via a bunch of symbols, or even by exhibiting
% some code, I will begin by *drawing* it for you:

% ```{.dia width='450'}
% import           Bijections
% import           Control.Lens ((&), (.~))

% gcbp = drawBComplex . flattenA $
%     bc01' .- ebij1 -. bc01' .- ebij1 -.. bc01'
%   where
%     ebij1 = colorBij colorMap $
%             emptyBij `parBij` (bij1 & labelBij "f₁⁻¹")
%     bc01' = map2 (colorBij colorMap . labelBij "f") bc01
%     colorMap = orbitsToColorMap
%                  [red, green, blue, orange, purple]
%                  (orbits
%                    (bijToRel bij01)
%                    (bijToRel ebij1)
%                  )

% gcbpEqn =
%   (vcat' (with & sep .~ 1) . map centerX)
%   [ hcat' (with & sep .~ 2)
%     [ drawBComplex $
%       [a0,a1] .- bij01 # labelBij "f" -.. [b0,b1]
%     , minus
%     , drawBComplex $ bc1 # labelBC "f₁"
%     ]
%   , equals
%   , gcbp
%   ]

% -- XXX draw resulting bijection

% dia = gcbpEqn
%   # centerXY # pad 1.1
%   # sized (Width 2)
% ```

% Here's the idea in words: start with an element in $A_0$ (that's the
% yellow set in the illustration above), and apply $f$.  If we get something in $B_0$ (blue),
% great---we're done!  Otherwise, we have something in $B_1$ (red), so
% we apply $f_1^{-1}$ to send us back over to $B_0$ (green), and from
% there we apply $f$ again and repeat.  In the above example, you can
% see that the first two elements of $A_0$ land in $B_0$ immediately;
% for the third, we have to iterate three times (or perhaps we should
% say "two and a half times").

% Here's a more complicated example:

% ```{.dia width='450'}
% import Bijections
% import Control.Lens ((&), (.~))
% import Data.Bits (xor)
% import Data.Typeable (cast)
% import Diagrams.Core.Names

% a2 = nset 4 yellow
% b2 = nset 4 blue
% a3 = nset 5 green
% b3 = nset 5 red

% bc3 = [a3] .- bij3 -.. [b3]

% bij3 = [bijFun [0..4] (Just . (\n -> if n == 4 then 4 else xor 1 n))]

% bij23 = [with & bijData .~ tableToFun tab23]
% tab23 = zip (('a' ||> toNamesI [0..3]) ++ ('b' ||> toNamesI [0..4]))
%             [ 'b' ||@@ 0, 'a' ||@@ 0, 'b' ||@@ 1, 'a' ||@@ 1
%             , 'b' ||@@ 2, 'a' ||@@ 2, 'b' ||@@ 3, 'b' ||@@ 4, 'a' ||@@ 3
%             ]

% bc23 = [a2,a3] .- bij23 -.. [b2,b3]

% gcbp = drawBComplex . flattenA $
%   bc23' .- ebij3 -. bc23' .- ebij3 -. bc23' .- ebij3 -.. bc23'
%   where
%     ebij3 = emptyBij `parBij` (bij3 & labelBij "f₁⁻¹")
%     bc23' = map2 (labelBij "f") bc23

% gcbpEqn =
%   (vcat' (with & sep .~ 1) . map centerX)
%   [ hcat' (with & sep .~ 2)
%     [ drawBComplex $
%       [a2,a3] .- bij23 # labelBij "f" -.. [b2,b3]
%     , minus
%     , drawBComplex $ bc3 # labelBC "f₁"
%     ]
%   , equals
%   , gcbp
%   ]

% dia = gcbpEqn
%   # centerXY # pad 1.1
%   # sized (Width 2)

% ```

% We need to show that this gives a well-defined bijection---that it
% terminates, first of all, and that it gives us a mapping which really
% is a bijection.

% The "usual" proof goes something like this: XXX

% However, we can apprehend the validity of the GCBP more directly and
% intuitively.  Consider "extending to infinity" the iteration in both
% directions.

% XXX picture.

% Since we have created this picture by simply copying the same
% bijections over and over, it obviously has translational
% symmetry---moving it one unit to the left or right doesn't change
% anything.  Let's consider the different types of paths that show up in
% this kind of picture.

% First, can there be bi-infinite paths?  Sure, there can be, but any
% such path must necessarily stay entirely within the bottom half of the
% picture, since the top half of the picture only contains *ends* of
% paths.  Since our goal is to construct a bijection between the top
% sets we can therefore ignore bi-infinite paths.

% Can there be *half*-infinite paths, *i.e.* paths which have a starting
% point in the top half of the picture but then wander around in the
% bottom half forever?  No, because XXX it will intersect its copies
% (explain this better).  Therefore, every path that is not bi-infinite
% must have two endpoints in the top half of the picture.

% Finally, it's easy to see that every point belongs to a unique
% path. (XXX why?)

% The GCBP in Haskell
% -------------------

% Here's my implementation of `subtractIso`:

% > subtractIso' :: (Either a0 a1 :<->: Either b0 b1) -> (a1 :<->: b1) -> (a0 :<->: b0)
% > subtractIso' a0a1__b0b1 a1__b1 =
% >     (iter (applyIso a0a1__b0b1) (applyIso $ invert a1__b1) . Left)
% >     :<->:
% >     (iter (applyIso $ invert a0a1__b0b1) (applyIso $ a1__b1) . Left)
% >   where
% >     iter a0a1_b0b1 b1_a1 a0a1 =
% >       case a0a1_b0b1 a0a1 of
% >         Left  b0 -> b0
% >         Right b1 -> iter a0a1_b0b1 b1_a1 (Right (b1_a1 b1))

% It feels sort of ugly---in fact, it is the exact computational
% analogue of the usual proof of the GCBP (though it's missing quite a
% bit, in particular a proof of termination and a proof that the output
% really is a bijection).  Given that I don't like the usual proof, it's
% no surprise that I find this code ugly.  I don't like the fact that it
% projects functions out of the input bijections and uses them to
% construct the two directions of the output bijection separately.  I'd
% rather work entirely in terms of operations on bijections.  I don't
% know whether that is possible.  I'd be very interested to see what
% others come up with.

% The Garsia-Milne involution principle
% -------------------------------------

% Further reading
% ---------------

% XXX Cite Garsia-Milne paper(s).  Don't recommend actually reading
% it/them.

% Came out of trying to prove partition identities. XXX cite Wilf paper
% tying a bunch of this together.


% \begin{prop}[Gordon complementary bijection principle]
%   For finite sets $A_1$, $A_2$, $B_1$, and $B_2$, if $A_1 + B_1
%   \equiv A_2 + B_2$ and $B_1 \equiv B_2$, then $A_1 \equiv A_2$.
% \end{prop}

% \later{Explain intuition.  Can use some text from half-written blog
%   post.}

% \begin{proof}
%   \later{Figure out a good constructive proof!}
% \end{proof}
